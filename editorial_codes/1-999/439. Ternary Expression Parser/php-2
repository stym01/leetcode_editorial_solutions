class Solution {

    /**
     * @param String $expression
     * @return String
     */
    function parseTernary($expression) {
        
        // Initialize a stack
        $stack = [];
        $i = strlen($expression) - 1;

        // Traverse the expression from right to left
        while ($i >= 0) {

            // Current character
            $curr = $expression[$i];
            
            // Push every T, F, and digit on the stack
            if ($curr >= '0' && $curr <= '9' || $curr == 'T' || $curr == 'F') {
                array_push($stack, $curr);
            }
            
            // As soon as we encounter ?, 
            // replace top two elements of the stack with one
            else if ($curr == '?') {
                $onTrue = array_pop($stack);
                $onFalse = array_pop($stack);
                array_push($stack, $expression[$i - 1] == 'T' ? $onTrue : $onFalse);
                
                // Decrement i by 1 as we have already used
                // Previous Boolean character
                $i -= 1;
            }
            
            // Go to the previous character
            $i -= 1;
        }
        
        // Return the final character
        return array_pop($stack);
    }
}
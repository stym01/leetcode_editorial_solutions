class Solution {
  String parseTernary(String expression) {
    // Initialize a stack
    final stack = <String>[];
    var i = expression.length - 1;

    // Traverse the expression from right to left
    while (i >= 0) {
      // Current character. 
      final curr = expression[i];

      // Push every T, F, and digit on the stack.
      if (curr.compareTo('0') >= 0 && curr.compareTo('9') <= 0 || curr == 'T' || curr == 'F') {
        stack.add(curr);
      }

      // As soon as we encounter ?,
      // replace top two elements of the stack with one
      else if (curr == '?') {
        final onTrue = stack.removeLast();
        final onFalse = stack.removeLast();
        stack.add(expression[i - 1] == 'T' ? onTrue : onFalse);

        // Decrement i by 1 as we have already used
        // Previous Boolean character
        i -= 1;
      }

      // Go to the previous character
      i -= 1;
    }

    // Return the final character
    return stack.removeLast();
  }
}
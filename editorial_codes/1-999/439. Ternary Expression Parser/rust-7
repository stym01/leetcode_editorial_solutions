impl Solution {
    pub fn parse_ternary(expression: String) -> String {
        
        let mut i = 0;
        for _ in 0..expression.len() {
            
            if expression.chars().nth(i).unwrap() != 'T' && expression.chars().nth(i).unwrap() != 'F'
            || i == expression.len() - 1 || expression.chars().nth(i + 1).unwrap() == ':' {
                break;
            }
            if expression.chars().nth(i).unwrap() == 'T' {
                i += 2;
            } else {
                let mut count = 1;
                i += 2;
                while count != 0 {
                    if expression.chars().nth(i).unwrap() == ':' {
                        count -= 1;
                    } else if expression.chars().nth(i).unwrap() == '?' {
                        count += 1;
                    }
                    i += 1;
                }
            }
        }

        return expression.chars().nth(i).unwrap().to_string();
    }
}
impl Solution {
    pub fn parse_ternary(expression: String) -> String {
        
        // Initialize a stack
        let mut stack = Vec::new();
        let expression = expression.as_bytes();
        let mut i = expression.len() - 1;

        // Traverse the expression from right to left
        while i >= 0 {

            // Current character.
            let curr = expression[i] as char;

            // Push every T, F, and digit on the stack. Expected enum `Option`, found `char`
            if curr >= '0' && curr <= '9' || curr == 'T' || curr == 'F' {
                stack.push(curr);
            }

            // As soon as we encounter ?,
            // replace top two elements of the stack with one
            else if curr == '?' {
                let on_true = stack.pop().unwrap();
                let on_false = stack.pop().unwrap();
                stack.push(if expression[i - 1] as char == 'T' { on_true } else { on_false });

                // Decrement i by 1 as we have already used
                // Previous Boolean character
                i -= 1;
            }

            if i == 0 {
                break;
            }

            // Go to the previous character
            i -= 1;
        }
    
        // Return character present at zeroth index
        stack.pop().unwrap().to_string()
    }
}
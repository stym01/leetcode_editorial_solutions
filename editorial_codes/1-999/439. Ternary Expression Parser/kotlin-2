class Solution {
    fun parseTernary(expression: String): String {
        
        // Initialize a stack
        val stack = mutableListOf<Char>()
        var i = expression.length - 1

        // Traverse the expression from right to left
        while (i >= 0) {

            // Current character
            val curr = expression[i]
            
            // Push every T, F, and digit on the stack
            if (curr >= '0' && curr <= '9' || curr == 'T' || curr == 'F') {
                stack.add(curr)
            }
            
            // As soon as we encounter ?, 
            // replace top two elements of the stack with one
            else if (curr == '?') {
                val onTrue = stack.removeAt(stack.size - 1)
                val onFalse = stack.removeAt(stack.size - 1)
                stack.add(if (expression[i - 1] == 'T') onTrue else onFalse)
                
                // Decrement i by 1 as we have already used
                // Previous Boolean character
                i -= 1
            }
            
            // Go to the previous character
            i -= 1
        }
        
        // Return the final character
        return stack.removeAt(stack.size - 1).toString()
    }
}
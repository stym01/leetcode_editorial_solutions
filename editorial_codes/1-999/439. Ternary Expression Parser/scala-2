object Solution {
    def parseTernary(expression: String): String = {
        
        // Initialize a stack
        var stack = List[Char]()
        var i = expression.length - 1

        // Traverse the expression from right to left
        while (i >= 0) {

            // Current character
            val curr = expression(i)
            
            // Push every T, F, and digit on the stack
            if (curr >= '0' && curr <= '9' || curr == 'T' || curr == 'F') {
                stack = curr :: stack
            }
            
            // As soon as we encounter ?, 
            // replace top two elements of the stack with one
            else if (curr == '?') {
                val onTrue = stack.head
                val onFalse = stack.tail.head
                stack = expression(i - 1) match {
                    case 'T' => onTrue :: stack.tail.tail
                    case 'F' => onFalse :: stack.tail.tail
                }
                
                // Decrement i by 1 as we have already used
                // Previous Boolean character
                i -= 1
            }
            
            // Go to the previous character
            i -= 1
        }
        
        // Return the final character
        stack.head.toString
    }
}
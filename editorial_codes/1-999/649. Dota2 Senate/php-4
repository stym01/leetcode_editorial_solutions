class Solution {

    /**
     * @param String $senate
     * @return String
     */
    function predictPartyVictory($senate) {
        
        // Number of Senators of each party
        $rCount = 0;
        $dCount = 0;

        // Floating Ban Count
        $dFloatingBan = 0;
        $rFloatingBan = 0;

        // Queue of Senators
        $q = [];
        for ($i = 0; $i < strlen($senate); $i++) {
            $q[] = $senate[$i];
            if ($senate[$i] == 'R') {
                $rCount += 1;
            } else {
                $dCount += 1;
            }
        }

        // While any party has eligible Senators
        while ($rCount > 0 && $dCount > 0) {

            // Pop the senator with turn
            $curr = array_shift($q);

            // If eligible, float the ban on the other party, enqueue again.
            // If not, decrement the floating ban and count of the party.
            if ($curr == 'D') {
                if ($dFloatingBan > 0) {
                    $dFloatingBan -= 1;
                    $dCount -= 1;
                } else {
                    $rFloatingBan += 1;
                    $q[] = 'D';
                }
            } else {
                if ($rFloatingBan > 0) {
                    $rFloatingBan -= 1;
                    $rCount -= 1;
                } else {
                    $dFloatingBan += 1;
                    $q[] = 'R';
                }
            }
        }

        // Return the party with eligible Senators
        if ($rCount > 0) {
            return "Radiant";
        } else {
            return "Dire";
        }
    }
}
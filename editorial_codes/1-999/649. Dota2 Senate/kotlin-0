class Solution {
    fun predictPartyVictory(senate: String): String {

        // Sentae Char Array
        var senateArray = senate.toCharArray()

        // Count of Each Type of Senator to check for Winner
        var rCount = senateArray.count { it == 'R' }
        var dCount = senateArray.size - rCount

        // Ban the candidate "toBan", immediate next to "startAt"
        // If have to loop around, then it means next turn will be of
        // senator at same index. Returns loop around boolean
        fun ban(toBan: Char, startAt: Int): Boolean {
            var loopAround = false
            var pointer = startAt

            while (true) {
                if (pointer == 0) {
                    loopAround = true
                }
                if (senateArray[pointer] == toBan) {
                    senateArray = senateArray.filterIndexed { index, _ -> index != pointer }.toCharArray()
                    return loopAround
                }
                pointer = (pointer + 1) % senateArray.size
            }

            loopAround
        }

        // Turn of Senator at this index
        var turn = 0

        // While No Winner
        while (rCount > 0 && dCount > 0) {

            // Ban the next opponent, starting at one index ahead
            // Taking MOD to loop around.
            // If index of banned senator is before current index,
            // then we need to decrement turn by 1, as we have removed
            // a senator from list
            if (senateArray[turn] == 'R') {
                val bannedSenatorBefore = ban('D', (turn + 1) % senateArray.size)
                dCount -= 1
                if (bannedSenatorBefore) {
                    turn -= 1
                }
            } else {
                val bannedSenatorBefore = ban('R', (turn + 1) % senateArray.size)
                rCount -= 1
                if (bannedSenatorBefore) {
                    turn -= 1
                }
            }

            // Increment turn by 1
            turn = (turn + 1) % senateArray.size
        }

        // Return Winner depending on count
        return if (dCount == 0) "Radiant" else "Dire"
    }
}
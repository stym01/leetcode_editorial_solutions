class Solution {
    fun predictPartyVictory(senate: String): String {

        // Number of Senators
        val n = senate.length

        // To mark Banned Senators
        val banned = BooleanArray(n)

        // List of indices of Eligible Radiant and Dire Senators
        val rIndices = mutableListOf<Int>()
        val dIndices = mutableListOf<Int>()
        for (i in 0 until n) {
            if (senate[i] == 'R') {
                rIndices.add(i)
            } else {
                dIndices.add(i)
            }
        }

        // Ban the senator of "indices" immediate next to "startAt"
        fun ban(indices: MutableList<Int>, startAt: Int) {
            // Find the index of "index of senator to ban" using Binary Search
            val temp = indices.indexOfFirst { it >= startAt }

            // If startAt is more than the last index,
            // then start from the beginning. Ban the first senator
            if (temp == -1) {
                banned[indices[0]] = true
                indices.removeAt(0)
            }

            // Else, Ban the senator at the index
            else {
                banned[indices[temp]] = true
                indices.removeAt(temp)
            }
        }

        // Turn of Senator at this Index
        var turn = 0

        // While both parties have at least one senator
        while (rIndices.isNotEmpty() && dIndices.isNotEmpty()) {
            if (!banned[turn]) {
                if (senate[turn] == 'R') {
                    ban(dIndices, turn)
                } else {
                    ban(rIndices, turn)
                }
            }

            turn = (turn + 1) % n
        }

        // Return the party with at least one senator
        return if (dIndices.isEmpty()) "Radiant" else "Dire"
    }
}
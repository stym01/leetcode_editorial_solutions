func predictPartyVictory(senate string) string {
    
    // Count of Each Type of Senator to check for Winner
    rCount := 0
    dCount := 0
    for _, c := range senate {
        if c == 'R' {
            rCount++
        } else {
            dCount++
        }
    }

    // Ban the candidate "toBan", immediate next to "startAt"
    // If have to loop around, then it means next turn will be of
    // senator at same index. Returns loop around boolean
    ban := func(toBan byte, startAt int) bool {
        loopAround := false
        pointer := startAt

        for {
            if pointer == 0 {
                loopAround = true
            }
            if senate[pointer] == toBan {
                senate = senate[:pointer] + senate[pointer+1:]
                break
            }
            pointer = (pointer + 1) % len(senate)
        }

        return loopAround
    }

    // Turn of Senator at this index
    turn := 0

    // While No Winner
    for rCount > 0 && dCount > 0 {

        // Ban the next opponent, starting at one index ahead
        // Taking MOD to loop around.
        // If index of banned senator is before current index,
        // then we need to decrement turn by 1, as we have removed
        // a senator from list
        if senate[turn] == 'R' {
            bannedSenatorBefore := ban('D', (turn + 1) % len(senate))
            dCount--
            if bannedSenatorBefore {
                turn--
            }
        } else {
            bannedSenatorBefore := ban('R', (turn + 1) % len(senate))
            rCount--
            if bannedSenatorBefore {
                turn--
            }
        }

        // Increment turn by 1
        turn = (turn + 1) % len(senate)
    }

    // Return Winner depending on the count
    if dCount == 0 {
        return "Radiant"
    } else {
        return "Dire"
    }
}
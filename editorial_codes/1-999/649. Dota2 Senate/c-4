char * predictPartyVictory(char * senate){
    
    // Number of Senators of each party
    int rCount = 0, dCount = 0;

    // Floating Ban Count
    int dFloatingBan = 0, rFloatingBan = 0;

    // Queue of Senators.
    int n = strlen(senate);
    int q[n];
    int front = 0, rear = 0;
    for (int i = 0; senate[i]; i++) {
        if (senate[i] == 'R') rCount++;
        else dCount++;
        q[rear] = senate[i];
        rear = (rear + 1) % n;
    }

    // While any party has eligible Senators
    while (rCount && dCount) {

        // Pop the senator with turn
        char curr = q[front];
        front = (front + 1) % n;

        // If eligible, float the ban on the other party, enqueue again.
        // If not, decrement the floating ban and count of the party.
        if (curr == 'D') {
            if (dFloatingBan) {
                dFloatingBan--;
                dCount--;
            } else {
                rFloatingBan++;
                q[rear] = 'D';
                rear = (rear + 1) % n;
            }
        } else {
            if (rFloatingBan) {
                rFloatingBan--;
                rCount--;
            } else {
                dFloatingBan++;
                q[rear] = 'R';
                rear = (rear + 1) % n;
            }
        }
    }

    // Return the party with eligible Senators
    return rCount ? "Radiant" : "Dire";
}
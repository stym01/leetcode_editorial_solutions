char *predictPartyVictory(char *senate) {
    
    // Count of Each Type of Senator to check for Winner
    int rCount = 0, dCount = 0;
    for (int i = 0; senate[i] != '\0'; i++) {
        if (senate[i] == 'R') {
            rCount++;
        } else {
            dCount++;
        }
    }

    // Ban the candidate "toBan", immediate next to "startAt"
    // If have to loop around, then it means next turn will be of
    // senator at same index. Returns loop around boolean
    bool ban(char toBan, int startAt) {
        bool loopAround = false;
        int pointer = startAt;

        while (true) {
            if (pointer == 0) {
                loopAround = true;
            }
            if (senate[pointer] == toBan) {
                for (int i = pointer; senate[i] != '\0'; i++) {
                    senate[i] = senate[i + 1];
                }
                break;
            }
            pointer = (pointer + 1) % strlen(senate);
        }

        return loopAround;
    }

    // Turn of Senator at this index
    int turn = 0;

    // While No Winner
    while (rCount > 0 && dCount > 0) {

        // Ban the next opponent, starting at one index ahead
        // Taking MOD to loop around.
        // If index of banned senator is before current index,
        // then we need to decrement turn by 1, as we have removed
        // a senator from list
        if (senate[turn] == 'R') {
            bool bannedSenatorBefore = ban('D', (turn + 1) % strlen(senate));
            dCount--;
            if (bannedSenatorBefore) {
                turn--;
            }
        } else {
            bool bannedSenatorBefore = ban('R', (turn + 1) % strlen(senate));
            rCount--;
            if (bannedSenatorBefore) {
                turn--;
            }
        }

        // Increment turn by 1
        turn = (turn + 1) % strlen(senate);
    }

    // Return Winner depending on count
    return dCount == 0 ? "Radiant" : "Dire";
}
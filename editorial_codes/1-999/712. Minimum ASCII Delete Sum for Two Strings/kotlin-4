class Solution {
    fun minimumDeleteSum(s1: String, s2: String): Int {
        
        // Make sure s2 is smaller string
        if (s1.length < s2.length) {
            return minimumDeleteSum(s2, s1)
        }
        
        // Case for empty s1
        val m = s1.length
        val n = s2.length
        var currRow = IntArray(n + 1)
        for (j in 1..n) {
            currRow[j] = currRow[j - 1] + s2[j - 1].toInt()
        }
        
        // Compute answer row-by-row
        for (i in 1..m) {
            
            var diag = currRow[0]
            currRow[0] += s1[i - 1].toInt()
            
            for (j in 1..n) {

                var answer = 0
                
                // If characters are the same, the answer is top-left-diagonal value
                if (s1[i - 1] == s2[j - 1]) {
                    answer = diag
                }
                
                // Otherwise, the answer is minimum of top and left values with
                // deleted character's ASCII value
                else {
                    answer = Math.min(
                        s1[i - 1].toInt() + currRow[j],
                        s2[j - 1].toInt() + currRow[j - 1]
                    )
                }
                
                // Before overwriting currRow[j] with answer, save it in diag
                // for the next column
                diag = currRow[j]
                currRow[j] = answer
            }
        }
        
        // Return the answer
        return currRow[n]
    }
}
function nimGame(piles) {
    // The count of stones remaining, we recurse until
    // the count becomes zero.
    let remaining = piles.reduce((a, b) => (a + b), 0);
    
    // Hash map for memoization
    let memo = new Map();

    // Is the person to play next the winner?
    // The first person to play is Alice at the beginning.
    // So, if Alice wins, it is going to be true, otherwise
    // it is going to be false.
    return isNextPersonWinner(piles, remaining, memo);
};

function isNextPersonWinner(piles, remaining, memo) {
    // Make a key by concatenating the count of stones
    // in each pile, so key for the state [1, 2, 3] => '1-2-3'.
    const key = piles.join("-");
    
    // Have we come across this state already?
    if (memo.has(key)) {
        return memo.get(key);
    }
    
    // The current player has no more moves left, so they
    // lose the game.
    if (remaining === 0) {
        return false;
    }
    
    // Generate all possible next moves and check if
    // the opponent loses the game in any of them.
    for (let i = 0; i < piles.length; i++) {
        // piles[i] is greater than 0.
        for (let j = 1; j <= piles[i]; j++) {
            piles[i] -= j;
            
            // Next state is created by making a copy of the
            // current state array, and sorting it in ascending
            // order of pile heights.
            let nextState = piles.slice().sort((a, b) => (a - b))
            
            // If the opponent loses, that means we win.
            if (!isNextPersonWinner(nextState, remaining - j, memo)) {
                memo.set(key, true);
                return true;
            }
            piles[i] += j;
        }
    }

    // If none returned false for the opponent, we must have
    // lost the game.
    memo.set(key, false);
    return false;
}